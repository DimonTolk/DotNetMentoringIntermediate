/*
 * This task is a bit harder than the previous two.
 * Feel free to change the E3SLinqProvider and any other classes if needed.
 * Possibly, after these changes you will need to rewrite existing tests to make them work again =).
 *
 * The task: implement support of && operator for IQueryable. The final request generated by FTSRequestGenerator, should
 * imply the following rules: https://kb.epam.com/display/EPME3SDEV/Telescope+public+REST+for+data#TelescopepublicRESTfordata-FTSRequestSyntax
 */

using System;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using Expressions.Task3.E3SQueryProvider.Models.Entities;
using Expressions.Task3.E3SQueryProvider.Models.Request;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Xunit;

namespace Expressions.Task3.E3SQueryProvider.Test
{
    public class E3SAndOperatorSupportTests
    {
        private static IConfigurationRoot _config = new ConfigurationBuilder()
            .AddJsonFile("appsettings.json")
            .Build();

        #region SubTask 3: AND operator support

        [Fact]
        public void TestAndQueryable()
        {
            var translator = new ExpressionToFtsRequestTranslator();
            Expression<Func<IQueryable<EmployeeEntity>, IQueryable<EmployeeEntity>>> expression
                = query => query.Where(e => e.Workstation == "EPRUIZHW006" && e.Manager.StartsWith("John"));

            var query = translator.Translate(expression);
            var generator = new FtsRequestGenerator(_config["api:apiBaseUrl"]);
            var uri = generator.GenerateRequestUrl<EmployeeEntity>(query);
            var collection = HttpUtility.ParseQueryString(uri.Query);

            var json = JsonConvert.SerializeObject(collection.AllKeys.ToDictionary(y => y, y => collection[y]));
            var uriQuery = (JObject)JsonConvert.DeserializeObject(json);
            var request = JsonConvert.DeserializeObject<FtsQueryRequest>(uriQuery["query"].Value<string>());

            Assert.Equal(2, request.Statements.Count);
            Assert.Equal("Workstation:(EPRUIZHW006)", request.Statements[0].Query);
            Assert.Equal("Manager:(John*)", request.Statements[1].Query);
        }

        #endregion
    }
}
